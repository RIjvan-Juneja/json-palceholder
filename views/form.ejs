<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSONPlaceholder Data</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
            margin-top: 20px;
        }

        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        th {
            background-color: #f2f2f2;
        }

        .pagination {
            display: flex;
            list-style: none;
            padding: 0;
        }

        .pagination li {
            margin-right: 5px;
            cursor: pointer;
        }
    </style>
</head>
<body>

    <h2>JSONPlaceholder Data</h2>

    <table id="data-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Details</th>
                <th>See Comments</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <div class="pagination" id="pagination">
        <span id="prev">Prev</span>
        <span id="current">1</span>
        <span id="next">Next</span>
    </div>

    <script>
        const apiUrl = 'https://jsonplaceholder.typicode.com/posts';
        const itemsPerPage = 10;
        let currentPage = 1;

        async function fetchData() {
            const response = await fetch(apiUrl);
            const data = await response.json();
            return data;
        }

        function createTableCell(text) {
            const cell = document.createElement('td');
            cell.textContent = text;
            return cell;
        }

        function createLinkCell(text, onclick) {
            const cell = document.createElement('td');
            const link = document.createElement('a');
            link.textContent = text;
            link.href = '#';
            link.addEventListener('click', onclick);
            cell.appendChild(link);
            return cell;
        }

        function displayData(data) {
            const tableBody = document.querySelector('#data-table tbody');
            tableBody.innerHTML = '';

            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            for (let i = startIndex; i < endIndex && i < data.length; i++) {
                const row = document.createElement('tr');
                row.appendChild(createTableCell(data[i].id));
                row.appendChild(createTableCell(data[i].title));
                row.appendChild(createLinkCell('Details', () => showDetails(data[i])));
                row.appendChild(createLinkCell('See Comments', () => showComments(data[i].id)));

                tableBody.appendChild(row);
            }
        }

        function renderPagination(data) {
            const totalPages = Math.ceil(data.length / itemsPerPage);
            const prevButton = document.getElementById('prev');
            const currentSpan = document.getElementById('current');
            const nextButton = document.getElementById('next');

            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    displayData(data);
                    currentSpan.textContent = currentPage;
                }
            });

            nextButton.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    displayData(data);
                    currentSpan.textContent = currentPage;
                }
            });
        }

        function showDetails(post) {
            // Redirect to a new page to display details
            window.location.href = `details.html?id=${post.id}&title=${post.title}&body=${post.body}`;
        }

        function showComments(postId) {
            // Redirect to a new page to display comments
            window.location.href = `/comments?postId=${postId}`;
        }

        async function init() {
            const data = await fetchData();
            displayData(data);
            renderPagination(data);
        }

        init();
    </script>

</body>
</html>
